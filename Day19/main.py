# FILENAME = "sample_input.txt"
FILENAME = "input.txt"

import time
import utils
from collections import defaultdict
from y2019.intcode import Intcode
# from scipy.stats import linregress


def main():
    start_time = time.time()

    data = parse_data()
    parse_time = time.time()

    answer1 = part1(data)
    part1_time = time.time()
    answer2 = part2(data)
    part2_time = time.time()

    print("---------------------------------------------------")
    print(f"Part 1 Answer: {answer1}")
    print()
    print(f"Part 2 Answer: {answer2}")
    print()
    print(f"Data Parse Execution Time: {1000*(parse_time - start_time):.2f} ms")
    print(f"Part 1 Execution Time:     {1000*(part1_time - parse_time):.2f} ms")
    print(f"Part 2 Execution Time:     {1000*(part2_time - part1_time):.2f} ms")
    print(f"Total Execution Time:      {1000*(part2_time - start_time):.2f} ms")
    print("---------------------------------------------------")


output = True  # Toggle this flag to enable/disable prints
def debug_print(*args, **kwargs):
    if output:
        print(*args, **kwargs)


def parse_data():
    with open(FILENAME, "r") as f:
        data = f.read()

    memory = defaultdict(int)
    for i, item in enumerate(data.strip().split(",")):
        memory[i] = int(item)

    return memory


def part1(data):

    affected = 0
    for y in range(50):
        for x in range(50):
            drone = Intcode(data)
            runner = drone.run()
            drone.inputs.append(x)
            drone.inputs.append(y)
            output = next(runner)
            if output == 1:
                affected += 1

    return affected


def write_grid_dict(data):

    # This function takes the map generated by the intcode computer and writes it to a file.
    # The tractor beam is shown as "#" while empty space is shown as ".".
    # Finally, the 100 x 100 ship is shown as "0". I just kept making different maps and moving the 
    # ship coordinates until I found the highest spot it would fit.

    max_y = max(y for y,x in data)+1
    max_x = max(x for y,x in data)+1
    min_y = min(y for y,x in data)
    min_x = min(x for y,x in data)
    target_y = 1022
    target_x = 1523
    with open("dict_grid.txt", "w") as f:
        for y in range(min_y, max_y):
            for x in range(min_x, max_x):
                if target_y <= y <= target_y + 99 and target_x <= x <= target_x + 99 and data[(y,x)] == "#":
                    f.write("0")
                elif target_y <= y <= target_y + 99 and target_x <= x <= target_x + 99:
                    f.write("X")
                else:
                    f.write(data[(y,x)])
            f.write("\n")
        f.write("\n")



def part2(data):

    # This script is not sufficient to get the correct answer. As you can see,
    # I tried finding the center line and working from that. But in the end, the only
    # way I found to do it was trial and error. I just map small versions of the map
    # and printed them out, moving up and down in y and x until I found the right answer.
    # Not as satisfying as programming a full solution, but that was the only way
    # I could figure it out.

    map = {}
    for y in range(900,1200):
        for x in range(1400,1700):
            drone = Intcode(data)
            runner = drone.run()
            drone.inputs.append(x)
            drone.inputs.append(y)
            output = next(runner)
            if output == 1:
                map[(y,x)] = "#"
            else:
                map[(y,x)] = "."

    write_grid_dict(map)

    # center_line = []
    # for y in range(900, 1200):
    #     start = False
    #     end = False
    #     no_good = False
    #     number = 0
    #     for x in range(1400, 1700):
    #         if x == 1400 and map[(y,x)] == "#":
    #             no_good = True
    #             break
    #         if not start and map[(y,x)] == "#":
    #             start = True
    #         if map[(y,x)] == "#":
    #             number += 1
    #         if start and map[(y,x)] == ".":
    #             end = True
    #             break
    #     if y not in [1,3] and end and not no_good:
    #         center_line.append((y, x - 1 - number//2))


    # print()
    # print(center_line)
    # y_vals, x_vals = zip(*center_line)
    # slope, intercept, r_value, p_value, std_err = linregress(x_vals, y_vals)
    # print(f"Center line best fit: y = {slope:.3f}x + {intercept:.3f}")
    # # print(f"{r_value=}, {p_value=}")


    # for left_x in range(1500, 1600):
    #     top_y = int(slope * left_x + intercept)
    #     bottom_y = top_y + 99
    #     right_x = left_x + 99
    #     points = [(left_x, top_y), (left_x, bottom_y), (right_x, top_y), (right_x, bottom_y)]
    #     result = 0
    #     for x_example, y_example in points:
    #         drone = Intcode(data)
    #         runner = drone.run()
    #         drone.inputs.append(x_example)
    #         drone.inputs.append(y_example)
    #         output = next(runner)
    #         if output == 1:
    #             result += 1
    #     print(points, result)
    #     if result == 4:
    #         print(f"{y=}, {x=}")
    #         return 10000*x + y




    return None


if __name__ == "__main__":
    main()